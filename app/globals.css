@import "tailwindcss";
@import "tw-animate-css";
@plugin "@tailwindcss/typography";

@custom-variant dark (&:is(.dark *));

/*
  The default border color has changed to `currentcolor` in Tailwind CSS v4,
  so we've added these compatibility styles to make sure everything still
  looks the same as it did with Tailwind CSS v3.

  If we ever want to remove these styles, we need to add an explicit border
  color utility to any element that depends on these defaults.
*/
:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.141 0.005 285.823);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.141 0.005 285.823);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.141 0.005 285.823);
  --primary: oklch(0.21 0.006 285.885);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.967 0.001 286.375);
  --secondary-foreground: oklch(0.21 0.006 285.885);
  --muted: oklch(0.967 0.001 286.375);
  --muted-foreground: oklch(0.552 0.016 285.938);
  --accent: oklch(0.967 0.001 286.375);
  --accent-foreground: oklch(0.21 0.006 285.885);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.92 0.004 286.32);
  --input: oklch(0.92 0.004 286.32);
  --ring: oklch(0.705 0.015 286.067);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.141 0.005 285.823);
  --sidebar-primary: oklch(0.21 0.006 285.885);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.967 0.001 286.375);
  --sidebar-accent-foreground: oklch(0.21 0.006 285.885);
  --sidebar-border: oklch(0.92 0.004 286.32);
  --sidebar-ring: oklch(0.705 0.015 286.067);
  --underline-hover: oklch(0.21 0.006 285.885);
  --color-pre-bg: oklch(0.9782 0.0034 247.86); /* #f6f8fa */
  --color-pre-code: oklch(0.278 0.0117 248.24); /* #e1e4e8 */
}

.dark {
  --background: oklch(0.141 0.005 285.823);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.21 0.006 285.885);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.21 0.006 285.885);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.92 0.004 286.32);
  --primary-foreground: oklch(0.21 0.006 285.885);
  --secondary: oklch(0.274 0.006 286.033);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.274 0.006 286.033);
  --muted-foreground: oklch(0.705 0.015 286.067);
  --accent: oklch(0.274 0.006 286.033);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.552 0.016 285.938);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.21 0.006 285.885);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.274 0.006 286.033);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.552 0.016 285.938);
  --underline-hover: oklch(0.7348 0 0);
  --color-pre-bg: oklch(0.278 0.0117 248.24); /* #24292e */
  --color-pre-code: oklch(0.7829 0.0235 248.13); /* #adbac7 */
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-destructive-foreground: var(--destructive-foreground);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);
  --color-pre-bg: var(--color-pre-bg);
  --color-pre-code: var(--color-pre-code);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }

  p > code {
    display: inline-block;
    background: var(--color-accent);
    padding-inline: 0.5rem;
    line-height: 1.5rem;
    height: 1.5rem;
    border-radius: 0.25rem;
    font-weight: normal !important;
  }
  p > code::before,
  p > code::after {
    display: none;
  }

  /* コードブロックのキャプション */
  figure[data-rehype-pretty-code-figure] {
    @apply relative;
  }
  figcaption[data-rehype-pretty-code-caption] {
    @apply absolute inset-0 w-full h-fit pl-4 pb-2 text-sm border-b border-border z-[1];
  }
}

@layer components {
  /* https://codepen.io/pxco/pen/GRzemVV */
  :is(.underline-rounded, .prose :where(a)) {
    padding: 2px 0 3px;
    text-decoration: none;
    --underline-offset: 4px;
    --underline-thickness: 2px;
    --underline-color: gray;

    --bg-pos: calc(1em + var(--underline-offset) + 1px);
    --bg-circle: var(--underline-color);
    --left: calc(var(--underline-thickness) / 2);
    --width: calc(100% - var(--underline-thickness));

    --bg-line: linear-gradient(var(--underline-color), var(--underline-color))
      no-repeat var(--left) var(--bg-pos) / var(--width)
      var(--underline-thickness);

    --bg-left: radial-gradient(
        var(--underline-thickness) circle at center,
        var(--bg-circle) 50%,
        transparent 51%
      )
      no-repeat left var(--bg-pos) / var(--underline-thickness)
      var(--underline-thickness);

    --bg-right: radial-gradient(
        var(--underline-thickness) circle at center,
        var(--bg-circle) 50%,
        transparent 51%
      )
      no-repeat right var(--bg-pos) / var(--underline-thickness)
      var(--underline-thickness);
    --bg-rounded-underline: var(--bg-left), var(--bg-right), var(--bg-line);

    background: var(--bg-rounded-underline);
    box-decoration-break: clone;

    transition: 160ms ease-out;
    transition-property: --underline-color;

    &:is(:hover, :focus-visible) {
      --underline-color: var(--underline-hover);
    }
  }
}

@layer utilities {
  .prose {
    --tw-prose-counters: var(--color-foreground);
    --tw-prose-bullets: var(--color-foreground);
    --tw-prose-invert-counters: var(--color-foreground);
    --tw-prose-invert-bullets: var(--color-foreground);
    --tw-prose-background: #333;
  }
  .prose a {
    text-decoration: none;
  }

  /* 1) code 側の背景は常に透明（Shikiや既存CSSの背景を打ち消す） */
  pre > code[data-theme] {
    background: transparent !important;
  }
  pre > code[data-theme] span {
    background: transparent !important; /* 行ハイライト背景を使っていなければ付けてもOK */
  }

  /* 2) pre にだけ “手動の” 背景色を付ける（ライト／ダークを明示） */
  /* GitHub Light のコードブロック相当: #f6f8fa（#ffffff を変更） */
  .prose pre {
    background-color: #f6f8fa !important;
    padding-top: 4rem; /* キャプションの高さ */
  }

  /* GitHub Dark Dimmed 相当の背景: #22272e（Dark相当なら #0d1117） */
  html.dark .prose pre {
    background-color: #24292e !important;
  }

  /* ▼デフォルト＝ライト */
  .prose pre code[data-theme*=" "],
  .prose pre code[data-theme*=" "] span {
    color: var(--shiki-light);
  }

  /* ▼ダーク時は .dark でダーク用の変数に切替 */
  html.dark .prose pre code[data-theme*=" "],
  html.dark .prose pre code[data-theme*=" "] span {
    color: var(--shiki-dark);
  }

  /* ★背景は code 側に塗る（変数が code にある前提） */
  code[data-theme*=" "] {
    background-color: var(--shiki-light-bg) !important;
    display: block; /* pre のパディング・角丸を使うなら省略可 */
  }
  html.dark code[data-theme*=" "] {
    background-color: var(--shiki-dark-bg) !important;
  }

  /* ダークモード時だけ .prose の配色を上書き（コードブロックの背景はさわらない） */
  html.dark .prose {
    --tw-prose-body: var(--color-foreground); /* 段落文字 */
    --tw-prose-headings: #ffffff; /* 見出し */
    --tw-prose-links: #ffffff; /* aリンク */
    --tw-prose-bold: #ffffff; /* strong/b */
    --tw-prose-counters: #9ca3af;
    --tw-prose-bullets: #9ca3af;
    --tw-prose-hr: #374151; /* hr */
    --tw-prose-quotes: #e5e7eb;
    --tw-prose-quote-borders: #374151;
    --tw-prose-captions: #9ca3af; /* figcaption 等 */
    --tw-prose-code: #f9fafb; /* インラインcodeの文字色 */
    --tw-prose-pre-code: inherit; /* ← pre内はShikiに任せる */
    --tw-prose-pre-bg: transparent; /* ← pre背景は塗らない（既に手動で制御中） */
  }
}
